// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/relnod/dotm/internal/util/file (interfaces: Visitor)

package mock

import (
	"reflect"

	pegomock "github.com/petergtz/pegomock"
)

type MockVisitor struct {
	fail func(message string, callerSkip ...int)
}

func NewMockVisitor() *MockVisitor {
	return &MockVisitor{fail: pegomock.GlobalFailHandler}
}

func (mock *MockVisitor) Visit(_param0 string, _param1 string) {
	params := []pegomock.Param{_param0, _param1}
	pegomock.GetGenericMockFrom(mock).Invoke("Visit", params, []reflect.Type{})
}

func (mock *MockVisitor) VerifyWasCalledOnce() *VerifierVisitor {
	return &VerifierVisitor{mock, pegomock.Times(1), nil}
}

func (mock *MockVisitor) VerifyWasCalled(invocationCountMatcher pegomock.Matcher) *VerifierVisitor {
	return &VerifierVisitor{mock, invocationCountMatcher, nil}
}

func (mock *MockVisitor) VerifyWasCalledInOrder(invocationCountMatcher pegomock.Matcher, inOrderContext *pegomock.InOrderContext) *VerifierVisitor {
	return &VerifierVisitor{mock, invocationCountMatcher, inOrderContext}
}

type VerifierVisitor struct {
	mock                   *MockVisitor
	invocationCountMatcher pegomock.Matcher
	inOrderContext         *pegomock.InOrderContext
}

func (verifier *VerifierVisitor) Visit(_param0 string, _param1 string) *Visitor_Visit_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Visit", params)
	return &Visitor_Visit_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Visitor_Visit_OngoingVerification struct {
	mock              *MockVisitor
	methodInvocations []pegomock.MethodInvocation
}

func (c *Visitor_Visit_OngoingVerification) GetCapturedArguments() (string, string) {
	_param0, _param1 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1]
}

func (c *Visitor_Visit_OngoingVerification) GetAllCapturedArguments() (_param0 []string, _param1 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
		_param1 = make([]string, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(string)
		}
	}
	return
}
